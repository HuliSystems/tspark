package com.facebook.beringei.thriftclient;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;

import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import javax.annotation.Generated;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-22")
public class GetLastUpdateTimesRequest implements org.apache.thrift.TBase<GetLastUpdateTimesRequest, GetLastUpdateTimesRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetLastUpdateTimesRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLastUpdateTimesRequest");

  private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MIN_LAST_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minLastUpdateTime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetLastUpdateTimesRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetLastUpdateTimesRequestTupleSchemeFactory());
  }

  public long shardId; // required
  public int minLastUpdateTime; // required
  public int offset; // required
  public int limit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SHARD_ID((short)1, "shardId"),
    MIN_LAST_UPDATE_TIME((short)2, "minLastUpdateTime"),
    OFFSET((short)3, "offset"),
    LIMIT((short)4, "limit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SHARD_ID
          return SHARD_ID;
        case 2: // MIN_LAST_UPDATE_TIME
          return MIN_LAST_UPDATE_TIME;
        case 3: // OFFSET
          return OFFSET;
        case 4: // LIMIT
          return LIMIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHARDID_ISSET_ID = 0;
  private static final int __MINLASTUPDATETIME_ISSET_ID = 1;
  private static final int __OFFSET_ISSET_ID = 2;
  private static final int __LIMIT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_LAST_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("minLastUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLastUpdateTimesRequest.class, metaDataMap);
  }

  public GetLastUpdateTimesRequest() {
  }

  public GetLastUpdateTimesRequest(
    long shardId,
    int minLastUpdateTime,
    int offset,
    int limit)
  {
    this();
    this.shardId = shardId;
    setShardIdIsSet(true);
    this.minLastUpdateTime = minLastUpdateTime;
    setMinLastUpdateTimeIsSet(true);
    this.offset = offset;
    setOffsetIsSet(true);
    this.limit = limit;
    setLimitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetLastUpdateTimesRequest(GetLastUpdateTimesRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.shardId = other.shardId;
    this.minLastUpdateTime = other.minLastUpdateTime;
    this.offset = other.offset;
    this.limit = other.limit;
  }

  public GetLastUpdateTimesRequest deepCopy() {
    return new GetLastUpdateTimesRequest(this);
  }

  @Override
  public void clear() {
    setShardIdIsSet(false);
    this.shardId = 0;
    setMinLastUpdateTimeIsSet(false);
    this.minLastUpdateTime = 0;
    setOffsetIsSet(false);
    this.offset = 0;
    setLimitIsSet(false);
    this.limit = 0;
  }

  public long getShardId() {
    return this.shardId;
  }

  public GetLastUpdateTimesRequest setShardId(long shardId) {
    this.shardId = shardId;
    setShardIdIsSet(true);
    return this;
  }

  public void unsetShardId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
  }

  /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
  public boolean isSetShardId() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
  }

  public void setShardIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
  }

  public int getMinLastUpdateTime() {
    return this.minLastUpdateTime;
  }

  public GetLastUpdateTimesRequest setMinLastUpdateTime(int minLastUpdateTime) {
    this.minLastUpdateTime = minLastUpdateTime;
    setMinLastUpdateTimeIsSet(true);
    return this;
  }

  public void unsetMinLastUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINLASTUPDATETIME_ISSET_ID);
  }

  /** Returns true if field minLastUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMinLastUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MINLASTUPDATETIME_ISSET_ID);
  }

  public void setMinLastUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINLASTUPDATETIME_ISSET_ID, value);
  }

  public int getOffset() {
    return this.offset;
  }

  public GetLastUpdateTimesRequest setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public int getLimit() {
    return this.limit;
  }

  public GetLastUpdateTimesRequest setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SHARD_ID:
      if (value == null) {
        unsetShardId();
      } else {
        setShardId((Long)value);
      }
      break;

    case MIN_LAST_UPDATE_TIME:
      if (value == null) {
        unsetMinLastUpdateTime();
      } else {
        setMinLastUpdateTime((Integer)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SHARD_ID:
      return getShardId();

    case MIN_LAST_UPDATE_TIME:
      return getMinLastUpdateTime();

    case OFFSET:
      return getOffset();

    case LIMIT:
      return getLimit();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SHARD_ID:
      return isSetShardId();
    case MIN_LAST_UPDATE_TIME:
      return isSetMinLastUpdateTime();
    case OFFSET:
      return isSetOffset();
    case LIMIT:
      return isSetLimit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetLastUpdateTimesRequest)
      return this.equals((GetLastUpdateTimesRequest)that);
    return false;
  }

  public boolean equals(GetLastUpdateTimesRequest that) {
    if (that == null)
      return false;

    boolean this_present_shardId = true;
    boolean that_present_shardId = true;
    if (this_present_shardId || that_present_shardId) {
      if (!(this_present_shardId && that_present_shardId))
        return false;
      if (this.shardId != that.shardId)
        return false;
    }

    boolean this_present_minLastUpdateTime = true;
    boolean that_present_minLastUpdateTime = true;
    if (this_present_minLastUpdateTime || that_present_minLastUpdateTime) {
      if (!(this_present_minLastUpdateTime && that_present_minLastUpdateTime))
        return false;
      if (this.minLastUpdateTime != that.minLastUpdateTime)
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_shardId = true;
    list.add(present_shardId);
    if (present_shardId)
      list.add(shardId);

    boolean present_minLastUpdateTime = true;
    list.add(present_minLastUpdateTime);
    if (present_minLastUpdateTime)
      list.add(minLastUpdateTime);

    boolean present_offset = true;
    list.add(present_offset);
    if (present_offset)
      list.add(offset);

    boolean present_limit = true;
    list.add(present_limit);
    if (present_limit)
      list.add(limit);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetLastUpdateTimesRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinLastUpdateTime()).compareTo(other.isSetMinLastUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinLastUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minLastUpdateTime, other.minLastUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetLastUpdateTimesRequest(");
    boolean first = true;

    sb.append("shardId:");
    sb.append(this.shardId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("minLastUpdateTime:");
    sb.append(this.minLastUpdateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetLastUpdateTimesRequestStandardSchemeFactory implements SchemeFactory {
    public GetLastUpdateTimesRequestStandardScheme getScheme() {
      return new GetLastUpdateTimesRequestStandardScheme();
    }
  }

  private static class GetLastUpdateTimesRequestStandardScheme extends StandardScheme<GetLastUpdateTimesRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetLastUpdateTimesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SHARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shardId = iprot.readI64();
              struct.setShardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MIN_LAST_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minLastUpdateTime = iprot.readI32();
              struct.setMinLastUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetLastUpdateTimesRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
      oprot.writeI64(struct.shardId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_LAST_UPDATE_TIME_FIELD_DESC);
      oprot.writeI32(struct.minLastUpdateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(struct.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(struct.limit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetLastUpdateTimesRequestTupleSchemeFactory implements SchemeFactory {
    public GetLastUpdateTimesRequestTupleScheme getScheme() {
      return new GetLastUpdateTimesRequestTupleScheme();
    }
  }

  private static class GetLastUpdateTimesRequestTupleScheme extends TupleScheme<GetLastUpdateTimesRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetLastUpdateTimesRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetShardId()) {
        optionals.set(0);
      }
      if (struct.isSetMinLastUpdateTime()) {
        optionals.set(1);
      }
      if (struct.isSetOffset()) {
        optionals.set(2);
      }
      if (struct.isSetLimit()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetShardId()) {
        oprot.writeI64(struct.shardId);
      }
      if (struct.isSetMinLastUpdateTime()) {
        oprot.writeI32(struct.minLastUpdateTime);
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetLastUpdateTimesRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.shardId = iprot.readI64();
        struct.setShardIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.minLastUpdateTime = iprot.readI32();
        struct.setMinLastUpdateTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
    }
  }

}

