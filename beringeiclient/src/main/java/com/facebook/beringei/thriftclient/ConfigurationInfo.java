package com.facebook.beringei.thriftclient;
/**

 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-22")
public class ConfigurationInfo implements org.apache.thrift.TBase<ConfigurationInfo, ConfigurationInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ConfigurationInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConfigurationInfo");

  private static final org.apache.thrift.protocol.TField SHARD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("shardCount", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SERVICE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceMap", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ConfigurationInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ConfigurationInfoTupleSchemeFactory());
  }

  public int shardCount; // required
  public List<ServiceMap> serviceMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SHARD_COUNT((short)1, "shardCount"),
    SERVICE_MAP((short)2, "serviceMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SHARD_COUNT
          return SHARD_COUNT;
        case 2: // SERVICE_MAP
          return SERVICE_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHARDCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SHARD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("shardCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SERVICE_MAP, new org.apache.thrift.meta_data.FieldMetaData("serviceMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceMap.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConfigurationInfo.class, metaDataMap);
  }

  public ConfigurationInfo() {
  }

  public ConfigurationInfo(
    int shardCount,
    List<ServiceMap> serviceMap)
  {
    this();
    this.shardCount = shardCount;
    setShardCountIsSet(true);
    this.serviceMap = serviceMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigurationInfo(ConfigurationInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.shardCount = other.shardCount;
    if (other.isSetServiceMap()) {
      List<ServiceMap> __this__serviceMap = new ArrayList<ServiceMap>(other.serviceMap.size());
      for (ServiceMap other_element : other.serviceMap) {
        __this__serviceMap.add(new ServiceMap(other_element));
      }
      this.serviceMap = __this__serviceMap;
    }
  }

  public ConfigurationInfo deepCopy() {
    return new ConfigurationInfo(this);
  }

  @Override
  public void clear() {
    setShardCountIsSet(false);
    this.shardCount = 0;
    this.serviceMap = null;
  }

  public int getShardCount() {
    return this.shardCount;
  }

  public ConfigurationInfo setShardCount(int shardCount) {
    this.shardCount = shardCount;
    setShardCountIsSet(true);
    return this;
  }

  public void unsetShardCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHARDCOUNT_ISSET_ID);
  }

  /** Returns true if field shardCount is set (has been assigned a value) and false otherwise */
  public boolean isSetShardCount() {
    return EncodingUtils.testBit(__isset_bitfield, __SHARDCOUNT_ISSET_ID);
  }

  public void setShardCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHARDCOUNT_ISSET_ID, value);
  }

  public int getServiceMapSize() {
    return (this.serviceMap == null) ? 0 : this.serviceMap.size();
  }

  public java.util.Iterator<ServiceMap> getServiceMapIterator() {
    return (this.serviceMap == null) ? null : this.serviceMap.iterator();
  }

  public void addToServiceMap(ServiceMap elem) {
    if (this.serviceMap == null) {
      this.serviceMap = new ArrayList<ServiceMap>();
    }
    this.serviceMap.add(elem);
  }

  public List<ServiceMap> getServiceMap() {
    return this.serviceMap;
  }

  public ConfigurationInfo setServiceMap(List<ServiceMap> serviceMap) {
    this.serviceMap = serviceMap;
    return this;
  }

  public void unsetServiceMap() {
    this.serviceMap = null;
  }

  /** Returns true if field serviceMap is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceMap() {
    return this.serviceMap != null;
  }

  public void setServiceMapIsSet(boolean value) {
    if (!value) {
      this.serviceMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SHARD_COUNT:
      if (value == null) {
        unsetShardCount();
      } else {
        setShardCount((Integer)value);
      }
      break;

    case SERVICE_MAP:
      if (value == null) {
        unsetServiceMap();
      } else {
        setServiceMap((List<ServiceMap>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SHARD_COUNT:
      return getShardCount();

    case SERVICE_MAP:
      return getServiceMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SHARD_COUNT:
      return isSetShardCount();
    case SERVICE_MAP:
      return isSetServiceMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigurationInfo)
      return this.equals((ConfigurationInfo)that);
    return false;
  }

  public boolean equals(ConfigurationInfo that) {
    if (that == null)
      return false;

    boolean this_present_shardCount = true;
    boolean that_present_shardCount = true;
    if (this_present_shardCount || that_present_shardCount) {
      if (!(this_present_shardCount && that_present_shardCount))
        return false;
      if (this.shardCount != that.shardCount)
        return false;
    }

    boolean this_present_serviceMap = true && this.isSetServiceMap();
    boolean that_present_serviceMap = true && that.isSetServiceMap();
    if (this_present_serviceMap || that_present_serviceMap) {
      if (!(this_present_serviceMap && that_present_serviceMap))
        return false;
      if (!this.serviceMap.equals(that.serviceMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_shardCount = true;
    list.add(present_shardCount);
    if (present_shardCount)
      list.add(shardCount);

    boolean present_serviceMap = true && (isSetServiceMap());
    list.add(present_serviceMap);
    if (present_serviceMap)
      list.add(serviceMap);

    return list.hashCode();
  }

  @Override
  public int compareTo(ConfigurationInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetShardCount()).compareTo(other.isSetShardCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShardCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardCount, other.shardCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceMap()).compareTo(other.isSetServiceMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceMap, other.serviceMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConfigurationInfo(");
    boolean first = true;

    sb.append("shardCount:");
    sb.append(this.shardCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceMap:");
    if (this.serviceMap == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConfigurationInfoStandardSchemeFactory implements SchemeFactory {
    public ConfigurationInfoStandardScheme getScheme() {
      return new ConfigurationInfoStandardScheme();
    }
  }

  private static class ConfigurationInfoStandardScheme extends StandardScheme<ConfigurationInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConfigurationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SHARD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shardCount = iprot.readI32();
              struct.setShardCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVICE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.serviceMap = new ArrayList<ServiceMap>(_list80.size);
                ServiceMap _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new ServiceMap();
                  _elem81.read(iprot);
                  struct.serviceMap.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setServiceMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConfigurationInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SHARD_COUNT_FIELD_DESC);
      oprot.writeI32(struct.shardCount);
      oprot.writeFieldEnd();
      if (struct.serviceMap != null) {
        oprot.writeFieldBegin(SERVICE_MAP_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.serviceMap.size()));
          for (ServiceMap _iter83 : struct.serviceMap)
          {
            _iter83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConfigurationInfoTupleSchemeFactory implements SchemeFactory {
    public ConfigurationInfoTupleScheme getScheme() {
      return new ConfigurationInfoTupleScheme();
    }
  }

  private static class ConfigurationInfoTupleScheme extends TupleScheme<ConfigurationInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConfigurationInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetShardCount()) {
        optionals.set(0);
      }
      if (struct.isSetServiceMap()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetShardCount()) {
        oprot.writeI32(struct.shardCount);
      }
      if (struct.isSetServiceMap()) {
        {
          oprot.writeI32(struct.serviceMap.size());
          for (ServiceMap _iter84 : struct.serviceMap)
          {
            _iter84.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConfigurationInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.shardCount = iprot.readI32();
        struct.setShardCountIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.serviceMap = new ArrayList<ServiceMap>(_list85.size);
          ServiceMap _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = new ServiceMap();
            _elem86.read(iprot);
            struct.serviceMap.add(_elem86);
          }
        }
        struct.setServiceMapIsSet(true);
      }
    }
  }

}

