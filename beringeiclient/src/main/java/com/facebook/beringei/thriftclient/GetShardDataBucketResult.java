package com.facebook.beringei.thriftclient;

/**

 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;

import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

import javax.annotation.Generated;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-04-22")
public class GetShardDataBucketResult implements org.apache.thrift.TBase<GetShardDataBucketResult, GetShardDataBucketResult._Fields>, java.io.Serializable, Cloneable, Comparable<GetShardDataBucketResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetShardDataBucketResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField RECENT_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("recentRead", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MORE_ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("moreEntries", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GetShardDataBucketResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GetShardDataBucketResultTupleSchemeFactory());
  }

  /**
   * 
   * @see StatusCode
   */
  public StatusCode status; // required
  public List<String> keys; // required
  public List<List<TimeSeriesBlock>> data; // required
  public List<Boolean> recentRead; // required
  public boolean moreEntries; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see StatusCode
     */
    STATUS((short)1, "status"),
    KEYS((short)2, "keys"),
    DATA((short)3, "data"),
    RECENT_READ((short)4, "recentRead"),
    MORE_ENTRIES((short)5, "moreEntries");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // KEYS
          return KEYS;
        case 3: // DATA
          return DATA;
        case 4: // RECENT_READ
          return RECENT_READ;
        case 5: // MORE_ENTRIES
          return MORE_ENTRIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MOREENTRIES_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StatusCode.class)));
    tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeSeriesBlock.class)))));
    tmpMap.put(_Fields.RECENT_READ, new org.apache.thrift.meta_data.FieldMetaData("recentRead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.MORE_ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("moreEntries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetShardDataBucketResult.class, metaDataMap);
  }

  public GetShardDataBucketResult() {
  }

  public GetShardDataBucketResult(
    StatusCode status,
    List<String> keys,
    List<List<TimeSeriesBlock>> data,
    List<Boolean> recentRead,
    boolean moreEntries)
  {
    this();
    this.status = status;
    this.keys = keys;
    this.data = data;
    this.recentRead = recentRead;
    this.moreEntries = moreEntries;
    setMoreEntriesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetShardDataBucketResult(GetShardDataBucketResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetKeys()) {
      List<String> __this__keys = new ArrayList<String>(other.keys);
      this.keys = __this__keys;
    }
    if (other.isSetData()) {
      List<List<TimeSeriesBlock>> __this__data = new ArrayList<List<TimeSeriesBlock>>(other.data.size());
      for (List<TimeSeriesBlock> other_element : other.data) {
        List<TimeSeriesBlock> __this__data_copy = new ArrayList<TimeSeriesBlock>(other_element.size());
        for (TimeSeriesBlock other_element_element : other_element) {
          __this__data_copy.add(new TimeSeriesBlock(other_element_element));
        }
        __this__data.add(__this__data_copy);
      }
      this.data = __this__data;
    }
    if (other.isSetRecentRead()) {
      List<Boolean> __this__recentRead = new ArrayList<Boolean>(other.recentRead);
      this.recentRead = __this__recentRead;
    }
    this.moreEntries = other.moreEntries;
  }

  public GetShardDataBucketResult deepCopy() {
    return new GetShardDataBucketResult(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.keys = null;
    this.data = null;
    this.recentRead = null;
    setMoreEntriesIsSet(false);
    this.moreEntries = false;
  }

  /**
   * 
   * @see StatusCode
   */
  public StatusCode getStatus() {
    return this.status;
  }

  /**
   * 
   * @see StatusCode
   */
  public GetShardDataBucketResult setStatus(StatusCode status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getKeysSize() {
    return (this.keys == null) ? 0 : this.keys.size();
  }

  public java.util.Iterator<String> getKeysIterator() {
    return (this.keys == null) ? null : this.keys.iterator();
  }

  public void addToKeys(String elem) {
    if (this.keys == null) {
      this.keys = new ArrayList<String>();
    }
    this.keys.add(elem);
  }

  public List<String> getKeys() {
    return this.keys;
  }

  public GetShardDataBucketResult setKeys(List<String> keys) {
    this.keys = keys;
    return this;
  }

  public void unsetKeys() {
    this.keys = null;
  }

  /** Returns true if field keys is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys() {
    return this.keys != null;
  }

  public void setKeysIsSet(boolean value) {
    if (!value) {
      this.keys = null;
    }
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public java.util.Iterator<List<TimeSeriesBlock>> getDataIterator() {
    return (this.data == null) ? null : this.data.iterator();
  }

  public void addToData(List<TimeSeriesBlock> elem) {
    if (this.data == null) {
      this.data = new ArrayList<List<TimeSeriesBlock>>();
    }
    this.data.add(elem);
  }

  public List<List<TimeSeriesBlock>> getData() {
    return this.data;
  }

  public GetShardDataBucketResult setData(List<List<TimeSeriesBlock>> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public int getRecentReadSize() {
    return (this.recentRead == null) ? 0 : this.recentRead.size();
  }

  public java.util.Iterator<Boolean> getRecentReadIterator() {
    return (this.recentRead == null) ? null : this.recentRead.iterator();
  }

  public void addToRecentRead(boolean elem) {
    if (this.recentRead == null) {
      this.recentRead = new ArrayList<Boolean>();
    }
    this.recentRead.add(elem);
  }

  public List<Boolean> getRecentRead() {
    return this.recentRead;
  }

  public GetShardDataBucketResult setRecentRead(List<Boolean> recentRead) {
    this.recentRead = recentRead;
    return this;
  }

  public void unsetRecentRead() {
    this.recentRead = null;
  }

  /** Returns true if field recentRead is set (has been assigned a value) and false otherwise */
  public boolean isSetRecentRead() {
    return this.recentRead != null;
  }

  public void setRecentReadIsSet(boolean value) {
    if (!value) {
      this.recentRead = null;
    }
  }

  public boolean isMoreEntries() {
    return this.moreEntries;
  }

  public GetShardDataBucketResult setMoreEntries(boolean moreEntries) {
    this.moreEntries = moreEntries;
    setMoreEntriesIsSet(true);
    return this;
  }

  public void unsetMoreEntries() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MOREENTRIES_ISSET_ID);
  }

  /** Returns true if field moreEntries is set (has been assigned a value) and false otherwise */
  public boolean isSetMoreEntries() {
    return EncodingUtils.testBit(__isset_bitfield, __MOREENTRIES_ISSET_ID);
  }

  public void setMoreEntriesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MOREENTRIES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((StatusCode)value);
      }
      break;

    case KEYS:
      if (value == null) {
        unsetKeys();
      } else {
        setKeys((List<String>)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((List<List<TimeSeriesBlock>>)value);
      }
      break;

    case RECENT_READ:
      if (value == null) {
        unsetRecentRead();
      } else {
        setRecentRead((List<Boolean>)value);
      }
      break;

    case MORE_ENTRIES:
      if (value == null) {
        unsetMoreEntries();
      } else {
        setMoreEntries((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case KEYS:
      return getKeys();

    case DATA:
      return getData();

    case RECENT_READ:
      return getRecentRead();

    case MORE_ENTRIES:
      return isMoreEntries();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case KEYS:
      return isSetKeys();
    case DATA:
      return isSetData();
    case RECENT_READ:
      return isSetRecentRead();
    case MORE_ENTRIES:
      return isSetMoreEntries();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetShardDataBucketResult)
      return this.equals((GetShardDataBucketResult)that);
    return false;
  }

  public boolean equals(GetShardDataBucketResult that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_keys = true && this.isSetKeys();
    boolean that_present_keys = true && that.isSetKeys();
    if (this_present_keys || that_present_keys) {
      if (!(this_present_keys && that_present_keys))
        return false;
      if (!this.keys.equals(that.keys))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_recentRead = true && this.isSetRecentRead();
    boolean that_present_recentRead = true && that.isSetRecentRead();
    if (this_present_recentRead || that_present_recentRead) {
      if (!(this_present_recentRead && that_present_recentRead))
        return false;
      if (!this.recentRead.equals(that.recentRead))
        return false;
    }

    boolean this_present_moreEntries = true;
    boolean that_present_moreEntries = true;
    if (this_present_moreEntries || that_present_moreEntries) {
      if (!(this_present_moreEntries && that_present_moreEntries))
        return false;
      if (this.moreEntries != that.moreEntries)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_keys = true && (isSetKeys());
    list.add(present_keys);
    if (present_keys)
      list.add(keys);

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    boolean present_recentRead = true && (isSetRecentRead());
    list.add(present_recentRead);
    if (present_recentRead)
      list.add(recentRead);

    boolean present_moreEntries = true;
    list.add(present_moreEntries);
    if (present_moreEntries)
      list.add(moreEntries);

    return list.hashCode();
  }

  @Override
  public int compareTo(GetShardDataBucketResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecentRead()).compareTo(other.isSetRecentRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecentRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recentRead, other.recentRead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoreEntries()).compareTo(other.isSetMoreEntries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoreEntries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moreEntries, other.moreEntries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetShardDataBucketResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keys:");
    if (this.keys == null) {
      sb.append("null");
    } else {
      sb.append(this.keys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recentRead:");
    if (this.recentRead == null) {
      sb.append("null");
    } else {
      sb.append(this.recentRead);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("moreEntries:");
    sb.append(this.moreEntries);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetShardDataBucketResultStandardSchemeFactory implements SchemeFactory {
    public GetShardDataBucketResultStandardScheme getScheme() {
      return new GetShardDataBucketResultStandardScheme();
    }
  }

  private static class GetShardDataBucketResultStandardScheme extends StandardScheme<GetShardDataBucketResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetShardDataBucketResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = StatusCode.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.keys = new ArrayList<String>(_list40.size);
                String _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.keys.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.data = new ArrayList<List<TimeSeriesBlock>>(_list43.size);
                List<TimeSeriesBlock> _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  {
                    org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                    _elem44 = new ArrayList<TimeSeriesBlock>(_list46.size);
                    TimeSeriesBlock _elem47;
                    for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                    {
                      _elem47 = new TimeSeriesBlock();
                      _elem47.read(iprot);
                      _elem44.add(_elem47);
                    }
                    iprot.readListEnd();
                  }
                  struct.data.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECENT_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                struct.recentRead = new ArrayList<Boolean>(_list49.size);
                boolean _elem50;
                for (int _i51 = 0; _i51 < _list49.size; ++_i51)
                {
                  _elem50 = iprot.readBool();
                  struct.recentRead.add(_elem50);
                }
                iprot.readListEnd();
              }
              struct.setRecentReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MORE_ENTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.moreEntries = iprot.readBool();
              struct.setMoreEntriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetShardDataBucketResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.keys != null) {
        oprot.writeFieldBegin(KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.keys.size()));
          for (String _iter52 : struct.keys)
          {
            oprot.writeString(_iter52);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.data.size()));
          for (List<TimeSeriesBlock> _iter53 : struct.data)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter53.size()));
              for (TimeSeriesBlock _iter54 : _iter53)
              {
                _iter54.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.recentRead != null) {
        oprot.writeFieldBegin(RECENT_READ_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.recentRead.size()));
          for (boolean _iter55 : struct.recentRead)
          {
            oprot.writeBool(_iter55);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MORE_ENTRIES_FIELD_DESC);
      oprot.writeBool(struct.moreEntries);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetShardDataBucketResultTupleSchemeFactory implements SchemeFactory {
    public GetShardDataBucketResultTupleScheme getScheme() {
      return new GetShardDataBucketResultTupleScheme();
    }
  }

  private static class GetShardDataBucketResultTupleScheme extends TupleScheme<GetShardDataBucketResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetShardDataBucketResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetKeys()) {
        optionals.set(1);
      }
      if (struct.isSetData()) {
        optionals.set(2);
      }
      if (struct.isSetRecentRead()) {
        optionals.set(3);
      }
      if (struct.isSetMoreEntries()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetKeys()) {
        {
          oprot.writeI32(struct.keys.size());
          for (String _iter56 : struct.keys)
          {
            oprot.writeString(_iter56);
          }
        }
      }
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (List<TimeSeriesBlock> _iter57 : struct.data)
          {
            {
              oprot.writeI32(_iter57.size());
              for (TimeSeriesBlock _iter58 : _iter57)
              {
                _iter58.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetRecentRead()) {
        {
          oprot.writeI32(struct.recentRead.size());
          for (boolean _iter59 : struct.recentRead)
          {
            oprot.writeBool(_iter59);
          }
        }
      }
      if (struct.isSetMoreEntries()) {
        oprot.writeBool(struct.moreEntries);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetShardDataBucketResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.status = StatusCode.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.keys = new ArrayList<String>(_list60.size);
          String _elem61;
          for (int _i62 = 0; _i62 < _list60.size; ++_i62)
          {
            _elem61 = iprot.readString();
            struct.keys.add(_elem61);
          }
        }
        struct.setKeysIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.data = new ArrayList<List<TimeSeriesBlock>>(_list63.size);
          List<TimeSeriesBlock> _elem64;
          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
          {
            {
              org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _elem64 = new ArrayList<TimeSeriesBlock>(_list66.size);
              TimeSeriesBlock _elem67;
              for (int _i68 = 0; _i68 < _list66.size; ++_i68)
              {
                _elem67 = new TimeSeriesBlock();
                _elem67.read(iprot);
                _elem64.add(_elem67);
              }
            }
            struct.data.add(_elem64);
          }
        }
        struct.setDataIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.recentRead = new ArrayList<Boolean>(_list69.size);
          boolean _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = iprot.readBool();
            struct.recentRead.add(_elem70);
          }
        }
        struct.setRecentReadIsSet(true);
      }
      if (incoming.get(4)) {
        struct.moreEntries = iprot.readBool();
        struct.setMoreEntriesIsSet(true);
      }
    }
  }

}

